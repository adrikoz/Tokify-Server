org: adrikoz
app: tokify
service: 
  name: Tokify

frameworkVersion: '2'

# Custom variables are used in the .yaml files (used in the functions)
custom: 
  region: eu-west-2
  userTable: ${self:provider.stage}-user
  requestsTable: ${self:provider.stage}-contract-generator-requests
  connectionsTable: ${self:provider.stage}-websocket-connections
  tableThroughputs:
    dev: "20"
    prod: "20"
  customProviderName: my.ether.login
  templateContractBucketName: ${self:provider.stage}-template-contracts
  generatedContractBucketName: ${self:provider.stage}-generated-contracts
  compiledContractBucketName: ${self:provider.stage}-compiled-contracts
  snapshotBucketName: ${self:provider.stage}-snapshot
  contractGeneratedStream:
    dev: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/dev-contract-generator-requests/stream/2021-12-17T18:40:15.064
    prod: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/prod-contract-generator-requests/stream/2021-12-17T19:12:26.719

provider:
  stage: prod
  region: eu-west-2
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  # Environment variables are used in the lambda functions
  environment:
    DEVELOPER_PROVIDER_NAME: ${self:custom.customProviderName}
    USERTABLE_NAME: ${self:custom.userTable}
    REQUESTS_TABLE: ${self:custom.requestsTable}
    CONNECTIONS_TABLE: ${self:custom.connectionsTable}
    IDENTITY_POOL_ID: { Ref: CognitoIdentityPool }
    TEMPLATE_CONTRACT_BUCKET_NAME: ${self:custom.templateContractBucketName}
    GENERATED_CONTRACT_BUCKET_NAME: ${self:custom.generatedContractBucketName}
    COMPILED_CONTRACT_BUCKET_NAME: ${self:custom.compiledContractBucketName}
    API_REGION: ${self:custom.region}
    STACK_STAGE: ${self:provider.stage}
    COVALENT_KEY: ckey_4e766e96577b45ee9bf95417a02
    SNAPSHOT_BUCKET_NAME: ${self:custom.snapshotBucketName}
  # Define what this stack is allowed to use / access control
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:ExecuteStatement"
        - "dynamodb:PartiQLSelect"
      Resource:
        - "Fn::GetAtt": [UserTable, Arn]
        - "Fn::Join":
            - "/"
            - - { "Fn::GetAtt": [UserTable, Arn] }
              - "index/*"
    - Effect: "Allow"
      Action:
        - "cognito-identity:GetCredentialsForIdentity"
        - "cognito-identity:GetOpenIdTokenForDeveloperIdentity"
      Resource:
        - "Fn::Join":
            - "/"
            - - "arn:aws:cognito-identity:${aws:region}:${aws:accountId}:identitypool"
              - Ref: CognitoIdentityPool
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - Fn::GetAtt: [ConnectionsTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConnectionsTable, Arn]
              - '*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - Fn::GetAtt: [RequestTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [RequestTable, Arn]
              - '*'
    -  Effect: "Allow"
       Action:
         - "s3:Put*"
         - "s3:Get*"
       Resource: "arn:aws:s3:::${self:custom.templateContractBucketName}/*"
    -  Effect: "Allow"
       Action:
         - "s3:Put*"
         - "s3:Get*"
       Resource: "arn:aws:s3:::${self:custom.generatedContractBucketName}/*"
    -  Effect: "Allow"
       Action:
         - "s3:Put*"
         - "s3:Get*"
       Resource: "arn:aws:s3:::${self:custom.compiledContractBucketName}/*"
    -  Effect: "Allow"
       Action:
         - "s3:Put*"
         - "s3:Get*"
       Resource: "arn:aws:s3:::${self:custom.snapshotBucketName}/*"
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource: "arn:aws:sns:eu-west-2:288605598865:*"

functions:
  ConnectWebsocket: ${file(resources/functions.yml):ConnectWebsocket}
  DefaultWebsocket: ${file(resources/functions.yml):DefaultWebsocket}
  Login: ${file(resources/functions.yml):Login}
  GetNonce: ${file(resources/functions.yml):GetNonce}
  Signup: ${file(resources/functions.yml):Signup}
  Hello: ${file(resources/functions.yml):Hello}
  ContractGeneratorRequest: ${file(resources/functions.yml):ContractGeneratorRequest}
  CompileContract: ${file(resources/functions.yml):CompileContract}
  DynamoTriggeredCreate: ${file(resources/functions.yml):DynamoTriggeredCreate}
  RetrieveBytecode: ${file(resources/functions.yml):RetrieveBytecode}
  MarkTxHash: ${file(resources/functions.yml):MarkTxHash}
  RetrieveUserContracts: ${file(resources/functions.yml):RetrieveUserContracts}
  Snapshot: ${file(resources/functions.yml):Snapshot}

resources:
  Resources:
    RequestTable: ${file(resources/tables.yml):RequestTable}
    UserTable: ${file(resources/tables.yml):UserTable}
    ConnectionsTable: ${file(resources/tables.yml):ConnectionsTable}
    CognitoIdentityPool: ${file(resources/cognito.yml):CognitoIdentityPool}
    CognitoAuthorizedRole: ${file(resources/cognito.yml):CognitoAuthorizedRole}
    CognitoUnAuthorizedRole: ${file(resources/cognito.yml):CognitoUnAuthorizedRole}
    CognitoIdentityPoolRolesMapping: ${file(resources/cognito.yml):CognitoIdentityPoolRolesMapping}
    TemplateBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.templateContractBucketName}
    GeneratedBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.generatedContractBucketName}
    CompiledBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.compiledContractBucketName}
    SnapshotBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.snapshotBucketName}
        LifecycleConfiguration:
          Rules:
            - Status: Enabled
              ExpirationInDays: 1
    
